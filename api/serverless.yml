service: cloudfront-demo-api

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:stage, 'us-east-1'}
  runtime: nodejs14.x
  timeout: 5
  memorySize: 128
  	
  httpApi:
    cors: true

package:
   individually: true

functions:
  authenticate:
    handler: functions/authenticate/index.handler
    description: Auth user
    events:
      - httpApi:
          method: post
          path: /auth/login
    role: LambdaReadDynamoTable
    environment:
      TABLE_NAME: CDAUsers
      JWT_SECRET_KEY: PUTthisSecretKeyInTheEnvironmentVariables
    package:
      patterns:
        - '!**/*'
        - 'functions/authenticate/**'

  register:
    handler: functions/register/index.handler
    description: Register a new user
    events:
      - httpApi:
          method: post
          path: /auth/register
    role: LambdaWriteDynamoTable
    environment:
      TABLE_NAME: CDAUsers
    package:
      patterns:
        - '!**/*'
        - 'functions/register/**'

  get-authenticated-user:
    handler: functions/get-authenticated-user/index.handler
    description: Get authenticated user
    events:
      - httpApi:
          method: get
          path: /auth/profile
    role: LambdaReadDynamoTable
    environment: 
      TABLE_NAME: CDAUsers
      JWT_SECRET_KEY: PUTthisSecretKeyInTheEnvironmentVariables
    package:
      patterns:
        - '!**/*'
        - 'functions/get-authenticated-user/**'

resources:
  Resources:
    CDAUsers:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          AttributeDefinitions:
            - AttributeName: _id
              AttributeType: S
          KeySchema:
            - AttributeName: _id
              KeyType: HASH
          # BillingMode: PAY_PER_REQUEST
          TableName: CDAUsers
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          SSESpecification:
            SSEEnabled: true

    LambdaReadDynamoTable:
      Type: AWS::IAM::Role
      Properties:
        # Path: /
        RoleName: LambdaReadDynamoTable
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: allow-function-get-item-from-dynamodb
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:*:*:table/*

                - Effect: Allow
                  Action: 
                    - logs:CreateLogStream
                    - logs:PutLogEvents 
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:log-stream:*


    LambdaWriteDynamoTable:
      Type: AWS::IAM::Role
      Properties:
        # Path: /my/cust/path/
        RoleName: LambdaWriteDynamoTable
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: allow-get-and-put-item-to-dynamodb
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:UpdateItem
                    - dynamodb:ListTables
                  Resource: arn:aws:dynamodb:*:*:table/*

                - Effect: Allow 
                  Action: 
                    - logs:CreateLogStream
                    - logs:PutLogEvents 
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:log-stream:*